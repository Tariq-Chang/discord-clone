{"version":3,"sources":["features/appSlice.js","SidebarChannel.jsx","features/userSlice.js","firebase.js","Sidebar.jsx","ChatHeader.jsx","Message.jsx","Chat.jsx","Login.jsx","App.js","app/store.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","channel","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","provider","GoogleAuthProvider","Sidebar","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","useSelector","prompt","add","index","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","console","log","email","photoURL","store","configureStore","reducer","userReducer","appReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bc2f5cb.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\nexport default appSlice.reducer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./SidebarChannel.css\";\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\nfunction SidebarChannel({ id, channel }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div\r\n      className=\"sidebarChannel\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channel.channelName,\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <h4>\r\n        <span className=\"sidebarChannel__hash\">#</span>\r\n        {channel.channelName}\r\n        {/* {props.channels.map((channel) => channel.channel.channelName)} */}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\nexport default userSlice.reducer;\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBd5UQMSTXOoyJqTKPnS-ufIWwzH0j5bJY\",\r\n  authDomain: \"discord-clone-8d323.firebaseapp.com\",\r\n  projectId: \"discord-clone-8d323\",\r\n  storageBucket: \"discord-clone-8d323.appspot.com\",\r\n  messagingSenderId: \"866698209650\",\r\n  appId: \"1:866698209650:web:23ea599d1d5f108a1815eb\",\r\n  measurementId: \"G-2XYZYSY0JS\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebaseApp.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\nfunction Sidebar() {\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"channels\").onSnapshot((snapshot) => {\r\n      setChannels(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          channel: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n  }, []);\r\n  const user = useSelector(selectUser);\r\n  \r\n  const handleAddChannel = () => {\r\n    const channelName = prompt(\"Enter a new Channel Name\");\r\n    if (channelName) {\r\n      db.collection(\"channels\").add({\r\n        channelName: channelName,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>Clever Programmer</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar__channelsHeader\">\r\n          <div className=\"sidebar__header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n          <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n        </div>\r\n        <div className=\"sidebar__channelsList\">\r\n          {channels.map((channel, index) => {\r\n            return (\r\n              <>\r\n                <SidebarChannel\r\n                  key={index}\r\n                  id={channel.id}\r\n                  channel={channel.channel}\r\n                />\r\n              </>\r\n            );\r\n          })}\r\n          {/* <SidebarChannel channels={channels} /> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar__voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"sidebar__voiceInfo\">\r\n          <h3>Voice connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar__voiceIcons\">\r\n          <InfoOutlinedIcon fontSize=\"large\" />\r\n          <CallIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__profile\">\r\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon fontSize=\"large\" />\r\n          <HeadsetIcon fontSize=\"large\" />\r\n          <SettingsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./ChatHeader.css\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"chatHeader\">\r\n      <div className=\"chatHeader__left\">\r\n        <h3>\r\n          <span className=\"chatHeader__hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"chatHeader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n        <div className=\"chatHeader__search\">\r\n          <input placeholder=\"Search\" />\r\n          <SearchRoundedIcon />\r\n        </div>\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import \"./Message.css\";\r\nimport React from \"react\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nfunction Message({ timestamp, message, user }) {\r\n  return (\r\n    <div className=\"message\">\r\n      <Avatar src={user.photo} />\r\n      <div className=\"message__info\">\r\n        <h4>\r\n          {user.displayName}\r\n          <span className=\"message__timestamp\">\r\n            {new Date(timestamp?.toDate()).toUTCString()}\r\n          </span>\r\n        </h4>\r\n        <p>{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelName = useSelector(selectChannelName);\r\n  const channelId = useSelector(selectChannelId);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          setMessages(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n      message: input,\r\n      user: user,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message #${channelName}`}\r\n          />\r\n          <button\r\n            onClick={sendMessage}\r\n            type=\"submit\"\r\n            className=\"chat__inputButton\"\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import \"./Login.css\";\r\nimport React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img\r\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT-x2sXwn1koUQvzJjkIMCinK1sedmJ1mofzaiT4wZMCAnPAFSpSmg0Ge2Nx61gT0d9yUo&usqp=CAU\"\r\n          alt=\"discord logo\"\r\n        />\r\n      </div>\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./Login\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { auth } from \"./firebase\";\nimport { login, logout } from \"./features/userSlice\";\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      console.log(authUser);\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            email: authUser.email,\n            photo: authUser.photoURL,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        // user is logged out\n        dispatch(\n          logout({\n            user: null,\n          })\n        );\n      }\n    });\n  }, [dispatch]);\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\nimport appReducer from \"../features/appSlice\";\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}